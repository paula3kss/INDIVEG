# -*- coding: utf-8 -*-
"""
/***************************************************************************
 INDIVEGDialog
                                 A QGIS plugin
 Plugin de cálculo de Indices de Vegetación a partir de imágenes satelitales
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Paula de Andrés Anaya
        email                : 70265257g@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from PyQt5 import uic, QtGui
from PyQt5.QtCore import QFileInfo
from PyQt5.QtWidgets import QFileDialog
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtGui import *
from qgis.utils import iface
from qgis.core import QgsRasterLayer
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry
import ctypes







# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'indiveg_modulo_dialog_base.ui'))


class INDIVEGDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(INDIVEGDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.bt_rutaguardar.clicked.connect(self.outFile) #Botón de selección de ruta para guardar
        self.bt_ejecutar.clicked.connect(self.calcular)  # Botón para calcular el indice seleccionado

    def outFile(self):  # by Carson Farmer 2008
        # display file dialog for output file
        self.txt_ruta.clear()  # Se borra la ruta que estuviera escrita anteriormente
        outName, _ = QFileDialog().getSaveFileName(self, "Indique Archivo de salida", ".",
                                                   "GeoTiff(*.tif)",
                                                   options=QFileDialog.DontConfirmOverwrite)
        outPath = QFileInfo(outName).absoluteFilePath()
        if outName:
            self.txt_ruta.clear()
            self.txt_ruta.insert(outPath)
            self.bt_ejecutar.setEnabled(True)


    def calcular(self):
        RED = QgsRasterLayer(self.carga_RED.filePath()) #Se guarda en la variable RED
        NIR = QgsRasterLayer(self.carga_NIR.filePath()) #Se guarda en la variable NIR

        # SE COMPRUEBA QUE LAS IMAGENES DE ENTRADA TENGAN LAS MISMAS DIMENSIONES
        if RED.width()==NIR.width() and RED.height()==NIR.height():
            continuar = True
        else :
            ctypes.windll.user32.MessageBoxW(0, "¡Las imágenes no tienen las mismas dimensiones!. Carguelas de nuevo", "Error!!", 1)
            continuar=False

        # SI LAS IMAGENES DE ENTRADA TIENEN LAS MISMAS DIMENSIONES SE EJECUTA
        if continuar==True :
            iface.addRasterLayer(str(self.carga_RED.filePath()))  # Se carga en QGIS, en el espaio de trabajo
            iface.addRasterLayer(str(self.carga_NIR.filePath()))  # Se carga en QGIS, en el espaio de trabajo
            # Definicion de los paramentros necesarios para la aplicacion de  QgsRasterCalculator
            output= self.txt_ruta.text()
            entries = []
            #BANDA RED
            ras = QgsRasterCalculatorEntry()
            ras.ref = 'ras@1'
            ras.raster = RED
            ras.bandNumber = 1
            entries.append(ras)
            #BANDA NIR
            ras = QgsRasterCalculatorEntry()
            ras.ref = 'ras@2'
            ras.raster = NIR
            ras.bandNumber = 1
            entries.append(ras)

            #DEPENDIENDO DEL ÍNDICE DE VEGETACIÓN SELECCIONADO EJECUTA UN CÁLCULO U OTRO
            if self.rb_AVI.isChecked()==True :
                calc = QgsRasterCalculator('("ras@2"*(1-"ras@1")*("ras@2"-"ras@1"))^(1/3)', output, 'GTiff', RED.extent(),RED.width(), RED.height(), entries)
                calc.processCalculation()
            if self.rb_NDVI.isChecked()==True :
                calc = QgsRasterCalculator('("ras@2"-"ras@1")/("ras@2"+"ras@1")', output,'GTiff', RED.extent(),
                                           RED.width(), RED.height(), entries)
                calc.processCalculation()
            if self.rb_SAVI.isChecked()==True :
                calc = QgsRasterCalculator('(("ras@2"-"ras@1")/("ras@2"+"ras@1"+0.5))*1.5', output, 'GTiff',
                                           RED.extent(),RED.width(), RED.height(), entries)
                calc.processCalculation()

            iface.addRasterLayer(output) # Se carga en QGIS el Output, en el espaio de trabajo


